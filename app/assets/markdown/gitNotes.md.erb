Set up repository by initializing git in project directory

	git init

Remember to set up .gitignore and README.md

To add files to repository (for all files use `.`)

	git add .
	git add fName
	git add dirName

To commit working branch to master branch (-m allows required commit message to be included in the command line)

	git commit -m "Present tense update note"

To see the commit log (quit by typing `q`)

	git log

To setup a repository (sets up main master branch at the repository)

	git remote add origin URL

To push local repositry to the main master branch (depending on the system some arguments can be omitted).

	git push -u origin master
	git push

To recover from the previous commit (-f is force overwrite)

	git checkout -f

To begin a local branch

	git checkout -b branchName

To see local branches for current project

	git branch

If you want to conserve the master branch and have a backup of the branch in the repository you push the branch to the repository and it will keep each branch seperate

	git checkout -b mynewfeature
	git push -u origin mynewfeature

To commit all modifications to existing files or those that are generated by git unix commands

	git commit -a -m "Update note"

To merge branches back into the master branch (after branch is commited)

	git checkout master
	#
	git merge branchName

To delete a branch that has been merged

	git branch -d branchName

In the case of an irrecoverable branch the -D flag will allow the branch to be deleted without merging changes to the master branch.

	git checkout -b newBranch
	# newBranch was irrecoverably messed up
	git add .
	git commit -a -m "Major screw up, branch lost"
	git checkout master
	git branch -D newBranch

## Other useful git information
[Git Reference](http://gitref.org/)

Git has it's own versions of Unix commands

	git mv source target

Git provides a way of making internal aliases, for example:

	git config --global alias.co checkout